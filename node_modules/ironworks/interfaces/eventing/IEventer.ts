
import IEvent = require('./IEvent');
import IEmit = require('./IEmit');

interface IEventer {
    getLastEvent(): string

    tell(
        event: IEmit|string
    ): boolean;

    inform<infoType>(
        event: IEmit|string,
        info: infoType
    ): boolean;

    confirm(
        event: IEmit|string,
        callback: (e: Error) => void
    ): boolean;

    check<checkType>(
        event: IEmit|string,
        toCheck: checkType,
        callback: (e: Error) => void
    ): boolean;

    ask<answerType>(
        event: IEmit|string,
        callback: (e: Error, answer?: answerType) => void
    ): boolean;

    request<requestType, responseType>(
        event: IEmit|string,
        request: requestType,
        callback: (e: Error, response?: responseType) => void
    ): boolean;


    listen(
        event: IEvent|string,
        listener:
            () => void
    ): IEventer;

    info<infoType>(
        event: IEvent|string,
        listener:
            (info: infoType) => void
    ): IEventer;

    ack(
        event: IEvent|string,
        listener:
            (callback: (e: Error) => void) => void
    ): IEventer;

    verify<checkType>(
        event: IEvent|string,
        listener:
            (toCheck: checkType, callback: (e: Error) => void) => void
    ): IEventer;

    answer<answerType>(
        event: IEvent|string,
        listener:
            (callback: (e: Error, answer?: answerType) => void) => void
    ): IEventer;

    respond<requestType, responseType>(
        event: IEvent|string,
        listener:
            (request: requestType, callback: (e: Error, response?: responseType) => void) => void
    ): IEventer;


    onlyOnce(): IEventer;

    dispose(callback?: () => void);
}

export = IEventer;
