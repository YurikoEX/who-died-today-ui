var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var _ = require('lodash');
var idHelper = require('../helpers/idHelper');
var CommEvent = require('./CommEvent');
var CommEmit = require('../eventing/CommEmit');
var Interceptor = require('../interception/Interceptor');
var Eventer = require('./Eventer');
var Comm = (function (_super) {
    __extends(Comm, _super);
    function Comm(service, whoAmI, serviceWorkerName, opts) {
        _super.call(this);
        this.service = service;
        this.serviceWorkerName = serviceWorkerName;
        var defOpts = {
            prefix: 'comm'
        };
        this.opts = this.opts.beAdoptedBy(defOpts, 'eventer');
        this.opts.merge(opts);
        this.me = whoAmI;
        this.running = false;
        this.ack('dispose', this.dispose);
    }
    Comm.prototype.init = function (callback) {
        process.nextTick(function () {
            callback(null);
        });
    };
    Comm.prototype.start = function (callback) {
        this.running = true;
        if (!_.isUndefined(callback)) {
            process.nextTick(function () {
                callback(null);
            });
        }
    };
    Comm.prototype.prefix = function () {
        return this.opts.get('prefix');
    };
    Comm.prototype.who = function (callback) {
        var iam = this.me;
        if (!_.isUndefined(callback)) {
            process.nextTick(function () {
                callback(null, iam);
            });
        }
        return iam;
    };
    Comm.prototype.getDependencyNames = function () {
        return [];
    };
    Comm.prototype.getComm = function () {
        return this;
    };
    Comm.prototype.getCommEvent = function (event, method) {
        if (typeof event === 'string') {
            var split = event.split('.').reverse();
            var evt = {
                prefix: _.isUndefined(split[4]) ? this.prefix() : split[4],
                service: _.isUndefined(split[3]) ? this.service.name : split[3],
                method: _.isUndefined(split[2]) ? method : split[2],
                worker: _.isUndefined(split[1]) ? this.serviceWorkerName : split[1],
                name: split[0]
            };
            return new CommEvent(evt);
        }
        return new CommEvent(event);
    };
    Comm.prototype.getEmit = function (event, method) {
        var evt = this.getCommEvent(event, method);
        var emit = event;
        return new CommEmit({
            id: _.isUndefined(emit.id) ? idHelper.newId() : emit.id,
            emitter: _.isUndefined(emit.emitter) ? this.me : emit.emitter,
            timestamp: _.isUndefined(emit.timestamp) ? new Date().getTime() : emit.timestamp,
            prefix: evt.prefix,
            service: evt.service,
            method: evt.method,
            worker: evt.worker,
            name: evt.name
        });
    };
    Comm.prototype.tell = function (event) {
        var emit = this.getEmit(event, 'tell');
        return _super.prototype.tell.call(this, emit);
    };
    Comm.prototype.inform = function (event, info) {
        var emit = this.getEmit(event, 'inform');
        return _super.prototype.inform.call(this, emit, info);
    };
    Comm.prototype.confirm = function (event, callback) {
        var emit = this.getEmit(event, 'confirm');
        return _super.prototype.confirm.call(this, emit, callback);
    };
    Comm.prototype.check = function (event, toCheck, callback) {
        var emit = this.getEmit(event, 'check');
        return _super.prototype.check.call(this, emit, toCheck, callback);
    };
    Comm.prototype.ask = function (event, callback) {
        var emit = this.getEmit(event, 'ask');
        return _super.prototype.ask.call(this, emit, callback);
    };
    Comm.prototype.request = function (event, request, callback) {
        var emit = this.getEmit(event, 'request');
        return _super.prototype.request.call(this, emit, request, callback);
    };
    Comm.prototype.intercept = function (event) {
        var i = new Interceptor(this, event);
        this.interceptors.add(i);
        return i;
    };
    Comm.prototype.listen = function (event, listener) {
        var evt = this.getCommEvent(event, 'tell');
        _super.prototype.listen.call(this, evt, listener);
        return this;
    };
    Comm.prototype.info = function (event, listener) {
        var evt = this.getCommEvent(event, 'inform');
        _super.prototype.info.call(this, evt, listener);
        return this;
    };
    Comm.prototype.ack = function (event, listener) {
        var evt = this.getCommEvent(event, 'confirm');
        _super.prototype.ack.call(this, evt, listener);
        return this;
    };
    Comm.prototype.verify = function (event, listener) {
        var evt = this.getCommEvent(event, 'check');
        _super.prototype.verify.call(this, evt, listener);
        return this;
    };
    Comm.prototype.answer = function (event, listener) {
        var evt = this.getCommEvent(event, 'ask');
        _super.prototype.answer.call(this, evt, listener);
        return this;
    };
    Comm.prototype.respond = function (event, listener) {
        var evt = this.getCommEvent(event, 'request');
        _super.prototype.respond.call(this, evt, listener);
        return this;
    };
    Comm.prototype.onlyOnce = function () {
        _super.prototype.onlyOnce.call(this);
        return this;
    };
    Comm.prototype.dispose = function (callback) {
        _super.prototype.dispose.call(this, callback);
    };
    return Comm;
})(Eventer);
module.exports = Comm;
//# sourceMappingURL=Comm.js.map