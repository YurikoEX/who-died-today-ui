
import _ = require('lodash');

import idHelper = require('../helpers/idHelper');

import IAm = require('../../interfaces/whoIAm/IAm');
import CommEvent = require('./CommEvent');
import ICommEvent = require('../../interfaces/eventing/ICommEvent');
import ICommEventData = require('../../interfaces/eventing/ICommEventData');
import ICommEmit = require('../../interfaces/eventing/ICommEmit');
import CommEmit = require('../eventing/CommEmit');
import IDependency = require('../../interfaces/workers/IDependency');
import ICollection = require('../../interfaces/collection/ICollection');
import IInterceptor = require('../../interfaces/interception/IInterceptor');
import Interceptor = require('../interception/Interceptor');

import Eventer = require('./Eventer');

import IComm = require('../../interfaces/eventing/IComm');
import ICommOpts = require('../../interfaces/opts/ICommOpts');

class Comm extends Eventer implements IComm {
    private service: IAm;
    private serviceWorkerName: string;
    private me: IAm;

    public running: boolean;

    constructor(service: IAm, whoAmI: IAm, serviceWorkerName: string, opts?: ICommOpts) {
        super();

        this.service = service;
        this.serviceWorkerName = serviceWorkerName;

        var defOpts: ICommOpts = {
            prefix: 'comm'
        };
        this.opts = this.opts.beAdoptedBy<ICommOpts>(defOpts, 'eventer');
        this.opts.merge(opts);

        this.me = whoAmI;
        this.running = false;

        this.ack('dispose', this.dispose);
    }

    public init(callback: (e: Error) => void) {
        process.nextTick(() => {
            callback(null);
        });
    }

    public start(callback?: (e: Error) => void) {
        this.running = true;
        if (!_.isUndefined(callback)) {
            process.nextTick(() => {
                callback(null);
            });
        }
    }

    public prefix(): string {
        return this.opts.get<string>('prefix');
    }

    public who(callback?: (e: Error, me: IAm) => void): IAm {
        var iam = this.me;
        if (!_.isUndefined(callback)) {
            process.nextTick(() => {
                callback(null, iam);
            });
        }
        return iam;
    }

    public getDependencyNames(): string[] {
        return [];
    }

    public getComm(): IComm {
        return this;
    }


    private getCommEvent(event: ICommEventData|string, method?: string): ICommEvent {
        if (typeof event === 'string') {
            var split = event.split('.').reverse();
            var evt: ICommEventData = {
                prefix: _.isUndefined(split[4]) ? this.prefix() : split[4],
                service: _.isUndefined(split[3]) ? this.service.name : split[3],
                method: _.isUndefined(split[2]) ? method : split[2],
                worker: _.isUndefined(split[1]) ? this.serviceWorkerName : split[1],
                name: split[0]
            };
            return new CommEvent(evt);
        }
        return new CommEvent(<ICommEventData>event);
    }

    private getEmit(event: ICommEmit|string, method?: string): ICommEmit {
        var evt = this.getCommEvent(event, method);
        var emit = <ICommEmit>event;
        return new CommEmit({
            id: _.isUndefined(emit.id) ? idHelper.newId() : emit.id,
            emitter: _.isUndefined(emit.emitter) ? this.me : emit.emitter,
            timestamp: _.isUndefined(emit.timestamp) ? new Date().getTime() : emit.timestamp,
            prefix: evt.prefix,
            service: evt.service,
            method: evt.method,
            worker: evt.worker,
            name: evt.name
        });
    }


    public tell(event: ICommEmit|string): boolean {
        var emit = this.getEmit(event, 'tell');
        return super.tell(emit);
    }

    public inform<infoType>(event: ICommEmit|string, info: infoType): boolean {
        var emit = this.getEmit(event, 'inform');
        return super.inform<infoType>(emit, info);
    }

    public confirm(event: ICommEmit|string, callback: (e: Error) => void): boolean {
        var emit = this.getEmit(event, 'confirm');
        return super.confirm(emit, callback);
    }

    public check<checkType>(event: ICommEmit|string, toCheck: checkType, callback: (e: Error) => void): boolean {
        var emit = this.getEmit(event, 'check');
        return super.check(emit, toCheck, callback);
    }

    public ask<answerType>(event: ICommEmit|string, callback: (e: Error, answer?: answerType) => void): boolean {
        var emit = this.getEmit(event, 'ask');
        return super.ask<answerType>(emit, callback);
    }

    public request<requestType, responseType>(
        event: ICommEmit|string, request: requestType, callback: (e: Error, response?: responseType) => void)
    : boolean {
        var emit = this.getEmit(event, 'request');
        return super.request<requestType, responseType>(emit, request, callback);
    }


    public intercept(event: ICommEventData|string): IInterceptor {
        var i = new Interceptor(this, event);
        this.interceptors.add(i);
        return i;
    }


    public listen(event: ICommEvent|string, listener: () => void): IComm {
        var evt = this.getCommEvent(event, 'tell');
        super.listen(evt, listener);
        return this;
    }

    public info<infoType>(event: ICommEvent|string, listener: (info: infoType) => void): IComm {
        var evt = this.getCommEvent(event, 'inform');
        super.info<infoType>(evt, listener);
        return this;
    }

    public ack(event: ICommEvent|string, listener: (callback: (e: Error) => void) => void): IComm {
        var evt = this.getCommEvent(event, 'confirm');
        super.ack(evt, listener);
        return this;
    }

    public verify<checkType>(
        event: ICommEvent|string, listener: (toCheck: checkType, callback: (e: Error) => void) => void)
    : IComm {
        var evt = this.getCommEvent(event, 'check');
        super.verify(evt, listener);
        return this;
    }

    public answer<answerType>(
        event: ICommEvent|string, listener: (callback: (e: Error, answer?: answerType) => void) => void
    ): IComm {
        var evt = this.getCommEvent(event, 'ask');
        super.answer<answerType>(evt, listener);
        return this;
    }

    public respond<requestType, responseType>(
        event: ICommEvent|string,
        listener: (request: requestType, callback: (e: Error, response?: responseType) => void) => void)
    : IComm {
        var evt = this.getCommEvent(event, 'request');
        super.respond<requestType, responseType>(evt, listener);
        return this;
    }

    public onlyOnce(): IComm {
        super.onlyOnce();
        return this;
    }


    public dispose(callback?: () => void) {
        super.dispose(callback);
    }
}

export = Comm;
