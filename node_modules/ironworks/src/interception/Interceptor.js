var _ = require('lodash');
var idHelper = require('../helpers/idHelper');
var CommEvent = require('../eventing/CommEvent');
var Interceptor = (function () {
    function Interceptor(comm, event, who) {
        this.comm = comm;
        this.event = new CommEvent(event);
        if (_.isUndefined(who)) {
            var id = idHelper.newId();
            this.me = {
                id: id,
                name: 'interceptor-' + this.event.getText() + '-' + id
            };
        }
        else {
            this.me = who;
        }
    }
    Interceptor.prototype.getEvent = function () {
        return this.event;
    };
    Interceptor.prototype.getComm = function () {
        return this.comm;
    };
    Interceptor.prototype.who = function (callback) {
        var iam = this.me;
        if (!_.isUndefined(callback)) {
            process.nextTick(function () {
                callback(null, iam);
            });
        }
        return iam;
    };
    Interceptor.prototype.intercept = function (emit, eventArgs, interception) {
        var interceptorArgs = [emit];
        interceptorArgs = interceptorArgs.concat(eventArgs);
        interceptorArgs.push(function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            interception(false, args);
        });
        interceptorArgs.push(function () {
            interception(true, eventArgs);
        });
        this.interceptor.apply(this, interceptorArgs);
    };
    Interceptor.prototype.listen = function (interceptor) {
        this.interceptor = interceptor;
        return this.comm;
    };
    Interceptor.prototype.info = function (interceptor) {
        this.interceptor = interceptor;
        return this.comm;
    };
    Interceptor.prototype.ack = function (interceptor) {
        this.interceptor = interceptor;
        return this.comm;
    };
    Interceptor.prototype.answer = function (interceptor) {
        this.interceptor = interceptor;
        return this.comm;
    };
    Interceptor.prototype.respond = function (interceptor) {
        this.interceptor = interceptor;
        return this.comm;
    };
    return Interceptor;
})();
module.exports = Interceptor;
//# sourceMappingURL=Interceptor.js.map