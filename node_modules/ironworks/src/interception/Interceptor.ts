
import _ = require('lodash');

import idHelper = require('../helpers/idHelper');

import ICommEmit = require('../../interfaces/eventing/ICommEmit');
import IComm = require('../../interfaces/eventing/IComm');
import ICommEventData = require('../../interfaces/eventing/ICommEventData');
import ICommEvent = require('../../interfaces/eventing/ICommEvent');
import CommEvent = require('../eventing/CommEvent');
import IAm = require('../../interfaces/whoIAm/IAm');

import IInterceptor = require('../../interfaces/interception/IInterceptor');
import IInterceptedTell = require('../../interfaces/interception/IInterceptedTell');
import IInterceptedInform = require('../../interfaces/interception/IInterceptedInform');
import IInterceptedConfirm = require('../../interfaces/interception/IInterceptedConfirm');
import IInterceptedAsk = require('../../interfaces/interception/IInterceptedAsk');
import IInterceptedRequest = require('../../interfaces/interception/IInterceptedRequest');

class Interceptor implements IInterceptor {
    private me: IAm;
    private comm: IComm;
    private event: ICommEvent;
    private interceptor: Function;

    constructor(comm: IComm, event: ICommEventData|string, who?: IAm) {
        this.comm = comm;
        this.event = new CommEvent(event);
        if (_.isUndefined(who)) {
            var id = idHelper.newId();
            this.me = {
                id: id,
                name: 'interceptor-' + this.event.getText() + '-' + id
            };
        }
        else {
            this.me = who;
        }
    }

    public getEvent(): ICommEvent {
        return this.event;
    }

    public getComm(): IComm {
        return this.comm;
    }

    public who(callback?: (e: Error, me: IAm) => void): IAm {
        var iam = this.me;
        if (!_.isUndefined(callback)) {
            process.nextTick(() => {
                callback(null, iam);
            });
        }
        return iam;
    }


    public intercept(
        emit: ICommEmit,
        eventArgs: any[],
        interception: (stop: boolean, updatedArgs: any[]) => void
    ) {
        var interceptorArgs: any[] = [ emit ];
        interceptorArgs = interceptorArgs.concat(eventArgs);
        interceptorArgs.push((...args: any[]) => {
            interception(false, args);
        });
        interceptorArgs.push(() => {
            interception(true, eventArgs);
        });
        this.interceptor.apply(this, interceptorArgs);
    }


    public listen(interceptor: IInterceptedTell): IComm {
        this.interceptor = interceptor;
        return this.comm;
    }

    public info<infoType>(interceptor: IInterceptedInform<infoType>): IComm {
        this.interceptor = interceptor;
        return this.comm;
    }

    public ack(interceptor: IInterceptedConfirm): IComm {
        this.interceptor = interceptor;
        return this.comm;
    }

    public answer<answerType>(interceptor: IInterceptedAsk<answerType>): IComm {
        this.interceptor = interceptor;
        return this.comm;
    }

    public respond<requestType, responseType>(interceptor: IInterceptedRequest<requestType, responseType>): IComm {
        this.interceptor = interceptor;
        return this.comm;
    }
}

export = Interceptor;
