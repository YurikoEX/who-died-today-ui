var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var _ = require('lodash');
var ioClient = require('socket.io-client');
var idHelper = require('../helpers/idHelper');
var Worker = require('./Worker');
var CfClientWorker = (function (_super) {
    __extends(CfClientWorker, _super);
    function CfClientWorker(comm, whoService, opts) {
        _super.call(this, [], comm, whoService, {
            id: idHelper.newId(),
            name: 'iw-cf-clients'
        });
        var defOpts = {
            iwProperty: 'iw',
            vcapServices: 'VCAP_SERVICES'
        };
        this.opts = this.opts.beAdoptedBy(defOpts, 'worker');
        this.opts.merge(opts);
    }
    CfClientWorker.prototype.init = function (callback) {
        this.getIwUserProvidedServices();
        _super.prototype.init.call(this, callback);
    };
    CfClientWorker.prototype.getIwUserProvidedServices = function () {
        var services = JSON.parse(process.env[this.opts.get('vcapServices')]);
        var instance = this;
        this.userProvidedServices = _.reduce(services['user-provided'], function (memo, service) {
            if (service.credentials[instance.opts.get('iwProperty')] === "true") {
                memo.push({
                    serviceName: service.credentials.serviceName,
                    protocol: service.credentials.protocol,
                    host: service.credentials.host,
                    port: service.credentials.port,
                    route: service.credentials.route,
                    token: service.credentials.token
                });
            }
            return memo;
        }, []);
    };
    CfClientWorker.constructServiceUrl = function (service) {
        return service.protocol + '://' + service.host + ':' + service.port + (_.isUndefined(service.route) ? '' : service.route[0] === '/' ? '' : '/' + service.route);
    };
    CfClientWorker.prototype.start = function (dependencies, callback) {
        var instance = this;
        _.each(instance.userProvidedServices, function (ups) {
            if (instance.whoService.name === ups.serviceName) {
                return;
            }
            instance.comm.listen(instance.comm.prefix() + '.' + ups.serviceName + '.*.*.*', function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                var event = instance.getCommEmit(instance.comm.getLastEvent());
                var service = _.find(instance.userProvidedServices, function (ups) { return ups.serviceName === event.service; });
                var serviceUrl = CfClientWorker.constructServiceUrl(service);
                var client = ioClient(serviceUrl);
                client.emit.apply(client, [event.getText()].concat(args));
            });
        });
        _super.prototype.start.call(this, dependencies, callback);
    };
    CfClientWorker.prototype.dispose = function (callback) {
        if (!_.isUndefined(callback)) {
            process.nextTick(function () {
                callback();
            });
        }
    };
    return CfClientWorker;
})(Worker);
module.exports = CfClientWorker;
//# sourceMappingURL=CfClientWorker.js.map