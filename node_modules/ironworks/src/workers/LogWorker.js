var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var _ = require('lodash');
var circular = require('circular');
var idHelper = require('../helpers/idHelper');
var Worker = require('./Worker');
var LogWorker = (function (_super) {
    __extends(LogWorker, _super);
    function LogWorker(comm, whoService, writeStdout, writeStderr, opts) {
        _super.call(this, [], comm, whoService, {
            id: idHelper.newId(),
            name: 'iw-log-to-console'
        });
        var defOpts = {};
        this.opts = this.opts.beAdoptedBy(defOpts, 'worker');
        this.opts.merge(opts);
        if (_.isUndefined(writeStdout) && _.isUndefined(LogWorker.writeStdout)) {
            LogWorker.writeStdout = console.log;
        }
        else {
            LogWorker.writeStdout = writeStdout;
        }
        if (_.isUndefined(writeStderr) && _.isUndefined(LogWorker.writeStderr)) {
            LogWorker.writeStderr = console.error;
        }
        else {
            LogWorker.writeStderr = writeStderr;
        }
    }
    LogWorker.prototype.start = function (dependencies, callback) {
        this.comm.intercept(this.comm.prefix() + '.*.*.*.*').listen(function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var meta = args[0];
            var nextIndex = 1;
            var emitterObj, cb, next;
            if (args.length === 5) {
                emitterObj = args[1];
                cb = args[2];
                nextIndex = 3;
            }
            else if (args.length === 4) {
                emitterObj = args[1];
                nextIndex = 2;
            }
            next = args[nextIndex];
            var nextArgs = [];
            if (!_.isUndefined(emitterObj)) {
                nextArgs.push(emitterObj);
                if (!_.isUndefined(cb)) {
                    nextArgs.push(function () {
                        var listenerArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            listenerArgs[_i - 0] = arguments[_i];
                        }
                        var e = listenerArgs[0];
                        var listenerRes;
                        if (listenerArgs.length > 1) {
                            listenerRes = listenerArgs[1];
                        }
                        if (e !== null) {
                            LogWorker.error(meta, e, emitterObj);
                        }
                        else {
                            LogWorker.log(meta, emitterObj, listenerRes);
                        }
                        cb(e, listenerRes);
                    });
                }
                else {
                    LogWorker.log(meta, emitterObj);
                }
            }
            else {
                LogWorker.log(meta);
            }
            next.apply(void 0, nextArgs);
        });
        _super.prototype.start.call(this, dependencies, callback);
    };
    LogWorker.log = function (meta, emitterObj, listenerRes) {
        process.nextTick(function () {
            var entry = {
                meta: meta
            };
            if (!_.isUndefined(emitterObj)) {
                entry.emitted = emitterObj;
            }
            if (!_.isUndefined(listenerRes)) {
                entry.result = listenerRes;
            }
            var json;
            try {
                json = JSON.stringify(entry);
            }
            catch (e) {
                json = JSON.stringify(entry, circular());
            }
            LogWorker.writeStdout(json);
        });
    };
    LogWorker.error = function (meta, error, emitterObj) {
        process.nextTick(function () {
            var entry = {
                meta: meta,
                error: error
            };
            if (!_.isUndefined(emitterObj)) {
                entry.emitted = emitterObj;
            }
            var json;
            try {
                json = JSON.stringify(entry);
            }
            catch (e) {
                json = JSON.stringify(entry, circular());
            }
            LogWorker.writeStderr(json);
        });
    };
    return LogWorker;
})(Worker);
module.exports = LogWorker;
//# sourceMappingURL=LogWorker.js.map