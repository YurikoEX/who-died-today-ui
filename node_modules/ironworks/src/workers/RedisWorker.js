var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var _ = require('lodash');
var redis = require('redis');
var idHelper = require('../helpers/idHelper');
var Worker = require('./Worker');
var RedisWorker = (function (_super) {
    __extends(RedisWorker, _super);
    function RedisWorker(comm, service, opts) {
        _super.call(this, [], comm, service, {
            id: idHelper.newId(),
            name: 'iw-redis'
        });
        var defOpts = {
            vcapServices: 'VCAP_SERVICES',
            redisProp: 'p-redis'
        };
        this.opts = this.opts.beAdoptedBy(defOpts, 'worker');
        this.opts.merge(opts);
    }
    RedisWorker.prototype.init = function (callback) {
        var instance = this;
        instance.getRedisCloudService();
        instance.info("set", function (info) {
            var stringData;
            if (typeof info.value === "string") {
                stringData = info.value;
            }
            else {
                stringData = JSON.stringify(info.value);
            }
            instance.client.set(info.key, stringData);
        });
        instance.respond("get", function (key, cb) {
            instance.client.get(key, function (err, results) {
                instance.parseResponseResults(cb, err, results);
            });
        });
        instance.respond("hmset", function (data, cb) {
            instance.client.hmset(data.key, data.value, function (err, results) {
                instance.parseResponseResults(cb, err, results);
            });
        });
        instance.respond("hgetall", function (key, cb) {
            instance.client.hgetall(key, function (err, results) {
                instance.parseResponseResults(cb, err, results);
            });
        });
        instance.connect(function (err) {
            if (!_.isUndefined(callback)) {
                callback(err);
            }
        });
    };
    RedisWorker.prototype.parseResponseResults = function (cb, err, results) {
        if (err) {
            cb(err);
        }
        else {
            var err;
            var obj = results;
            try {
                if (typeof obj === 'string' && obj.length > 0 && (obj[0] === '"' || obj[0] === '[' || obj[0] === '{'))
                    obj = JSON.parse(results);
            }
            catch (e) {
                err = e;
            }
            cb(err, obj);
        }
    };
    RedisWorker.prototype.connect = function (cb) {
        this.client = redis.createClient(this.redisService.port, this.redisService.hostname);
        if (!_.isUndefined(this.redisService.password)) {
            this.client.auth(this.redisService.password, function (err) {
                cb(err);
            });
        }
        else {
            cb(null);
        }
    };
    RedisWorker.prototype.getRedisCloudService = function () {
        var services = JSON.parse(process.env[this.opts.get('vcapServices')]);
        var instance = this;
        this.redisService = _.first(_.reduce(services[this.opts.get('redisProp')], function (memo, service) {
            memo.push({
                hostname: service.credentials.hostname,
                port: service.credentials.port,
                password: service.credentials.route
            });
            return memo;
        }, []));
    };
    RedisWorker.prototype.start = function (dependencies, callback) {
        var instance = this;
        this.tell('ready');
        if (!_.isUndefined(callback)) {
            process.nextTick(function () {
                callback(null);
            });
        }
    };
    RedisWorker.prototype.dispose = function (callback) {
        this.client.end();
        if (!_.isUndefined(callback)) {
            process.nextTick(function () {
                callback();
            });
        }
    };
    return RedisWorker;
})(Worker);
module.exports = RedisWorker;
//# sourceMappingURL=RedisWorker.js.map