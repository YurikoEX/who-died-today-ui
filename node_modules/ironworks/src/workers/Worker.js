var _ = require('lodash');
var idHelper = require('../../src/helpers/idHelper');
var Options = require('..//opts/Options');
var CommEmit = require('../eventing/CommEmit');
var CommEvent = require('../eventing/CommEvent');
var Collection = require('../collection/Collection');
var Worker = (function () {
    function Worker(dependencyNames, comm, whoService, whoAmI, opts) {
        var _this = this;
        var defOpts = {};
        this.opts = new Options(defOpts);
        this.opts.merge(opts);
        this.dependencyNames = dependencyNames;
        this.dependencies = new Collection(idHelper.newId());
        _.each(dependencyNames, function (name) {
            _this.dependencies.add({
                who: function () {
                    return {
                        id: void 0,
                        name: name.replace(/=/g, '-').replace(/NUL/g, '---')
                    };
                }
            });
        });
        this.me = whoAmI;
        this.running = false;
        this.useOnce = false;
        this.comm = comm;
        this.whoService = whoService;
    }
    Worker.prototype.init = function (callback) {
        if (!_.isUndefined(callback)) {
            process.nextTick(function () {
                callback(null);
            });
        }
    };
    Worker.prototype.start = function (dependencies, callback) {
        this.tell('ready');
        if (!_.isUndefined(callback)) {
            process.nextTick(function () {
                callback(null);
            });
        }
    };
    Worker.prototype.who = function (callback) {
        var iam = this.me;
        if (!_.isUndefined(callback)) {
            process.nextTick(function () {
                callback(null, iam);
            });
        }
        return iam;
    };
    Worker.prototype.getDependencyNames = function () {
        return this.dependencyNames;
    };
    Worker.prototype.getComm = function () {
        return this.comm;
    };
    Worker.prototype.getLastEvent = function () {
        return this.comm.getLastEvent();
    };
    Worker.prototype.getCommEvent = function (event, method) {
        if (typeof event === 'string') {
            var split = event.split('.').reverse();
            var evt = {
                prefix: _.isUndefined(split[4]) ? this.comm.prefix() : split[4],
                service: _.isUndefined(split[3]) ? this.whoService.name : split[3],
                method: _.isUndefined(split[2]) ? method : split[2],
                worker: _.isUndefined(split[1]) ? this.me.name : split[1],
                name: split[0]
            };
            return new CommEvent(evt);
        }
        return new CommEvent(event);
    };
    Worker.prototype.getCommEmit = function (event, method) {
        var evt = this.getCommEvent(event, method);
        var emit = event;
        return new CommEmit({
            id: _.isUndefined(emit.id) ? idHelper.newId() : emit.id,
            emitter: _.isUndefined(emit.emitter) ? this.me : emit.emitter,
            timestamp: _.isUndefined(emit.timestamp) ? new Date().getTime() : emit.timestamp,
            prefix: evt.prefix,
            service: evt.service,
            method: evt.method,
            worker: evt.worker,
            name: evt.name
        });
    };
    Worker.prototype.tell = function (event) {
        var evt = this.getCommEmit(event, 'tell');
        return this.comm.tell(evt);
    };
    Worker.prototype.inform = function (event, info) {
        var evt = this.getCommEmit(event, 'inform');
        return this.comm.inform(evt, info);
    };
    Worker.prototype.confirm = function (event, callback) {
        var evt = this.getCommEmit(event, 'confirm');
        return this.comm.confirm(evt, callback);
    };
    Worker.prototype.check = function (event, toCheck, callback) {
        var evt = this.getCommEmit(event);
        return this.comm.check(evt, toCheck, callback);
    };
    Worker.prototype.ask = function (event, callback) {
        var evt = this.getCommEmit(event, 'ask');
        return this.comm.ask(evt, callback);
    };
    Worker.prototype.request = function (event, request, callback) {
        var evt = this.getCommEmit(event, 'request');
        return this.comm.request(evt, request, callback);
    };
    Worker.prototype.listen = function (event, listener) {
        var evt = this.getCommEvent(event, 'tell');
        this.checkOnce();
        this.comm.listen(evt, listener);
        return this;
    };
    Worker.prototype.info = function (event, listener) {
        var evt = this.getCommEvent(event, 'inform');
        this.checkOnce();
        this.comm.info(evt, listener);
        return this;
    };
    Worker.prototype.ack = function (event, listener) {
        var evt = this.getCommEvent(event, 'confirm');
        this.checkOnce();
        this.comm.ack(evt, listener);
        return this;
    };
    Worker.prototype.verify = function (event, listener) {
        var evt = this.getCommEvent(event, 'check');
        this.checkOnce();
        this.comm.verify(evt, listener);
        return this;
    };
    Worker.prototype.answer = function (event, listener) {
        var evt = this.getCommEvent(event, 'ask');
        this.checkOnce();
        this.comm.answer(evt, listener);
        return this;
    };
    Worker.prototype.respond = function (event, listener) {
        var evt = this.getCommEvent(event, 'request');
        this.checkOnce();
        this.comm.respond(evt, listener);
        return this;
    };
    Worker.prototype.checkOnce = function () {
        if (this.useOnce) {
            this.useOnce = false;
            this.comm.onlyOnce();
        }
    };
    Worker.prototype.onlyOnce = function () {
        this.useOnce = true;
        return this;
    };
    Worker.prototype.dispose = function (callback) {
        //TODO
        if (!_.isUndefined(callback)) {
            process.nextTick(function () {
                callback();
            });
        }
    };
    return Worker;
})();
module.exports = Worker;
//# sourceMappingURL=Worker.js.map