
import _ = require('lodash');

import idHelper = require('../../src/helpers/idHelper');

import IComm = require('../../interfaces/eventing/IComm');
import Options = require('..//opts/Options');
import IAm = require('../../interfaces/whoIAm/IAm');
import ICommEmit = require('../../interfaces/eventing/ICommEmit');
import CommEmit = require('../eventing/CommEmit');
import ICommEvent = require('../../interfaces/eventing/ICommEvent');
import ICommEventData = require('../../interfaces/eventing/ICommEventData');
import CommEvent = require('../eventing/CommEvent');
import IDependency = require('../../interfaces/workers/IDependency');
import ICollection = require('../../interfaces/collection/ICollection');
import Collection = require('../collection/Collection');
import IWhoQuery = require('../../interfaces/whoIAm/IWhoQuery');

import IWorker = require('../../interfaces/workers/IWorker');
import IWorkerOpts = require('../../interfaces/opts/IWorkerOpts');

class Worker implements IWorker {
    protected dependencyNames: string[];
    protected dependencies: ICollection<IDependency<IWorker>>;
    protected whoService: IAm;
    protected me: IAm;
    protected useOnce: boolean;
    protected opts: Options<IWorkerOpts>;

    public comm: IComm;
    public running: boolean;

    constructor(dependencyNames: string[], comm: IComm, whoService: IAm, whoAmI: IAm, opts?: IWorkerOpts) {
        var defOpts: IWorkerOpts = {};
        this.opts = new Options<IWorkerOpts>(defOpts);
        this.opts.merge(opts);

        this.dependencyNames = dependencyNames;
        this.dependencies = new Collection<IDependency<IWorker>>(idHelper.newId());
        _.each(dependencyNames, (name) => {
            this.dependencies.add({
                who: (): IAm => {
                    return {
                        id: void 0,
                        name: name.replace(/=/g, '-').replace(/NUL/g, '---')
                    }
                }
            });
        });
        this.me = whoAmI;
        this.running = false;
        this.useOnce = false;
        this.comm = comm;
        this.whoService = whoService;
    }

    public init(callback: (e: Error) => void) {
        if (!_.isUndefined(callback)) {
            process.nextTick(() => {
                callback(null);
            });
        }
    }

    public start(dependencies?: ICollection<IDependency<IWorker>>, callback?: (e: Error) => void) {
        this.tell('ready');
        if (!_.isUndefined(callback)) {
            process.nextTick(() => {
                callback(null);
            });
        }
    }

    public who(callback?: (e: Error, me: IAm) => void): IAm {
        var iam = this.me;
        if (!_.isUndefined(callback)) {
            process.nextTick(() => {
                callback(null, iam);
            });
        }
        return iam;
    }

    public getDependencyNames(): string[] {
        return this.dependencyNames;
    }

    public getComm(): IComm {
        return this.comm;
    }

    public getLastEvent(): string {
        return this.comm.getLastEvent();
    }


    protected getCommEvent(event: ICommEventData|string, method?: string): ICommEvent {
        if (typeof event === 'string') {
            var split = event.split('.').reverse();
            var evt: ICommEventData = {
                prefix: _.isUndefined(split[4]) ? this.comm.prefix() : split[4],
                service: _.isUndefined(split[3]) ? this.whoService.name : split[3],
                method: _.isUndefined(split[2]) ? method : split[2],
                worker: _.isUndefined(split[1]) ? this.me.name : split[1],
                name: split[0]
            };
            return new CommEvent(evt);
        }
        return new CommEvent(<ICommEventData>event);
    }

    protected getCommEmit(event: ICommEmit|string, method?: string): ICommEmit {
        var evt = this.getCommEvent(event, method);
        var emit = <ICommEmit>event;
        return new CommEmit({
            id: _.isUndefined(emit.id) ? idHelper.newId() : emit.id,
            emitter: _.isUndefined(emit.emitter) ? this.me : emit.emitter,
            timestamp: _.isUndefined(emit.timestamp) ? new Date().getTime() : emit.timestamp,
            prefix: evt.prefix,
            service: evt.service,
            method: evt.method,
            worker: evt.worker,
            name: evt.name
        });
    }


    public tell(event: ICommEmit|string): boolean {
        var evt = this.getCommEmit(event, 'tell');
        return this.comm.tell(evt);
    }

    public inform<infoType>(event: ICommEmit|string, info: infoType): boolean {
        var evt = this.getCommEmit(event, 'inform');
        return this.comm.inform<infoType>(evt, info);
    }

    public confirm(event: ICommEmit|string, callback: (e: Error) => void): boolean {
        var evt = this.getCommEmit(event, 'confirm');
        return this.comm.confirm(evt, callback);
    }

    public check<checkType>(event: ICommEmit|string, toCheck: checkType, callback: (e: Error) => void): boolean {
        var evt = this.getCommEmit(event);
        return this.comm.check(evt, toCheck, callback);
    }

    public ask<answerType>(event: ICommEmit|string, callback: (e: Error, answer?: answerType) => void): boolean {
        var evt = this.getCommEmit(event, 'ask');
        return this.comm.ask<answerType>(evt, callback);
    }

    public request<requestType, responseType>(
        event: ICommEmit|string, request: requestType, callback: (e: Error, response?: responseType) => void)
    : boolean {
        var evt = this.getCommEmit(event, 'request');
        return this.comm.request<requestType, responseType>(evt, request, callback);
    }


    public listen(event: ICommEvent|string, listener: () => void): IWorker {
        var evt = this.getCommEvent(event, 'tell');
        this.checkOnce();
        this.comm.listen(evt, listener);
        return this;
    }

    public info<infoType>(event: ICommEvent|string, listener: (info: infoType) => void): IWorker {
        var evt = this.getCommEvent(event, 'inform');
        this.checkOnce();
        this.comm.info<infoType>(evt, listener);
        return this;
    }

    public ack(event: ICommEvent|string, listener: (callback: (e: Error) => void) => void): IWorker {
        var evt = this.getCommEvent(event, 'confirm');
        this.checkOnce();
        this.comm.ack(evt, listener);
        return this;
    }

    public verify<checkType>(
        event: ICommEvent|string, listener: (toCheck: checkType, callback: (e: Error) => void) => void)
    : IWorker {
        var evt = this.getCommEvent(event, 'check');
        this.checkOnce();
        this.comm.verify<checkType>(evt, listener);
        return this;
    }

    public answer<answerType>(
        event: ICommEvent|string, listener: (callback: (e: Error, answer?: answerType) => void) => void
    ): IWorker {
        var evt = this.getCommEvent(event, 'ask');
        this.checkOnce();
        this.comm.answer<answerType>(evt, listener);
        return this;
    }

    public respond<requestType, responseType>(
        event: ICommEvent|string, listener: (request: requestType, callback: (e: Error, response?: responseType) => void) => void
    ): IWorker {
        var evt = this.getCommEvent(event, 'request');
        this.checkOnce();
        this.comm.respond<requestType, responseType>(evt, listener);
        return this;
    }

    private checkOnce() {
        if (this.useOnce) {
            this.useOnce = false;
            this.comm.onlyOnce();
        }
    }

    public onlyOnce(): IWorker {
        this.useOnce = true;
        return this;
    }


    public dispose(callback?: () => void) {
        //TODO
        if (!_.isUndefined(callback)) {
            process.nextTick(() => {
                callback();
            });
        }
    }
}

export = Worker;
