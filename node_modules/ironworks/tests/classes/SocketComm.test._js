
var path = require('path');
var fs = require('fs');

var _ = require('lodash');
var request = require('request');

var chai = require('chai')
    ,expect = chai.expect;

chai.use(require('../_chai/toHaveAListener'));
chai.use(require('../_chai/toHaveAMethod'));

var SocketComm = require('../../src/classes/SocketComm');

describe('SocketComm', function () {
    var comm;

    beforeEach(function (done) {
        if (_.isUndefined(process.env.VCAP_APP_PORT)) {
            process.env.VCAP_APP_PORT = 8081;
        }
        done();
    });

    afterEach(function (done) {
        if (!_.isUndefined(comm)) {
            comm.dispose(function () {
                done();
            });
        }
    });

    it("should serve static files if the server.hapi.connections.routes.files.relativeTo option is set", function (done) {
        comm = new SocketComm({
            id: 'service-id',
            name: 'service-name'
        }, {
            id: 'comm-id',
            name: 'comm-name'
        }, {
            prefix: 'comm-prefix',
            server: {
                hapi: {
                    connections: {
                        routes: {
                            files: {
                                relativeTo: path.resolve('./tests/classes/public')
                            }
                        }
                    }
                }
            }
        });
        comm.start(function () {
            var url = 'http://localhost:' + process.env.VCAP_APP_PORT;
            request({
                url: url,
                method: 'GET'
            }, function (e, res, body) {
                expect(res.statusCode).to.be.equal(200);
                var indexHtml = fs.readFileSync(path.resolve('./tests/classes/public/index.html'), {
                    encoding: 'utf8'
                });
                expect(body).to.be.equal(indexHtml);
                done();
            });
        });
    });

    it("should serve registered rest methods if the server.apiUri option is set", function (done) {
        comm = new SocketComm({
            id: 'service-id',
            name: 'service-name'
        }, {
            id: 'comm-id',
            name: 'comm-name'
        }, {
            prefix: 'comm-prefix',
            server: {
                apiUri: '/api'
            }
        });
        var test = {
            some: 'data'
        };
        comm.start(function () {
            comm.respond('comm-prefix.service-name.worker-name.worker-event', function (req, cb) {
                cb(void 0, req);
            });

            var url = 'http://localhost:' + process.env.VCAP_APP_PORT +
                '/api/comm-prefix/service-name/request/worker-name/worker-event' +
                '?myId=comm-id&myName=comm-name';
            request({
                url: url,
                method: 'POST',
                json: true,
                body: test
            }, function (e, res, body) {
                expect(e).to.be.equal(void 0);
                expect(res.statusCode).to.be.equal(200);
                expect(body).to.be.equal(test);
                done();
            });
        });
    });
});
