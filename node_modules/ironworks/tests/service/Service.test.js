
var chai = require('chai')
    ,expect = chai.expect;

chai.use(require('../_chai/toHaveAMethod'));

var Worker = require('../../src/workers/Worker');

var Service = require('../../src/service/Service');

describe('Service', function () {
    var service;

    it("should have a 'use' method that accepts an IWorkerChild and manages it's dependencies when started",
        function (done) {
            service = new Service('service-name', {
                dependencyCheckTimeout: 250,
                dependencyCheckFrequency: 10
            });
            var worker2Name = 'worker-two';
            var worker1 = new Worker([
                worker2Name
            ], service.getComm(), service.who(), {
                id: 'worker-1',
                name: 'worker-one'
            });
            var worker2 = new Worker([], service.getComm(), service.who(), {
                id: 'worker-2',
                name: worker2Name
            });
            worker1.init = function (cb) {
                cb(null);
            };
            worker2.init = function (cb) {
                cb(null);
            };
            worker1.start = function (deps, cb) {
                cb(null);
            };
            worker2.start = function (deps, cb) {
                cb(null);
            };
            service
                .use(worker1)
                .use(worker2)
                .info('ready', function () {
                    done();
                })
                .info('error', function (e) {
                    throw e;
                });
                service.start();
        });

    it("should have a 'start' method that emits a 'ready' event", function (done) {
        service = new Service('service-name')
            .info('ready', function () {
                done();
            })
            .info('error', function (e) {
                throw e;
            })
            .start();
    });
});
