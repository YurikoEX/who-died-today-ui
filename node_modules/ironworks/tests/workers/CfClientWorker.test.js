
var _ = require('lodash');
var ioClient = require('socket.io-client');
var io = require('socket.io');
var request = require('request');

var chai = require('chai')
    ,expect = chai.expect;

chai.use(require('../_chai/toHaveAListener'));
chai.use(require('../_chai/toHaveAMethod'));

var ports = require('../test-ports.json');

var Service = require('../../src/service/Service');
var Comm = require('../../src/eventing/Comm');
var Worker = require('../../src/workers/Worker');
var HttpWorker = require('../../src/workers/HttpWorker');
var CfClientWorker = require('../../src/workers/CfClientWorker');
var SocketWorker = require('../../src/workers/SocketWorker');

describe('CfClientWorker', function () {
    var service;

    beforeEach(function (done) {
        process.env['VCAP_SERVICES_CF'] = JSON.stringify(
            {
                "user-provided": [
                    {
                        "credentials": {
                            "iw": "true",
                            "serviceName": "my-other-service",
                            "protocol":"http",
                            "host": "localhost",
                            "port": ports.CfClientWorker[0],
                            "route":"",
                            "token": "qwer32r123rewr213r"
                        },
                        "label": "user-provided",
                        "name": "my-other-service",
                        "syslog_drain_url": "",
                        "tags": []
                    },
                    {
                        "credentials": {
                            "iw": "true",
                            "serviceName": "service-name",
                            "protocol":"http",
                            "host": "localhost",
                            "port": ports.Interceptor[0],
                            "route":"",
                            "token": "qwer32r123rewr213r"
                        },
                        "label": "user-provided",
                        "name": "service-name",
                        "syslog_drain_url": "",
                        "tags": []
                    }
                ]
            });

        done();
    });

    it("should listen to comm events intended for another service, then connect to and emit the event to that service",
        function (done) {
            var test = {
                some: 'data'
            };
            var apiUri = 'api/';

            new Service('my-other-service')
            .inject(function (service, use) {
                use(new HttpWorker(service.comm, service.who(), {
                    port: ports.CfClientWorker[0]
                }));
            })
            .inject(function (service, use) {
                use(new SocketWorker(service.comm, service.who()));
            })
            .inject(function (service, use) {
                var w = new Worker([], service.comm, service.who(), {
                    id: 'foo-worker-id',
                    name: 'foo-worker'
                });
                w.answer('foo', function (cb) {
                    cb(null, 'bar');
                });
                w.init = function (cb) {
                    if (!_.isUndefined(cb)) {
                        cb();
                    }
                };
                w.start = function (deps, cb) {
                    if (!_.isUndefined(cb)) {
                        cb();
                    }
                };
                use(w);
            })
            .info('error', function (e) {
                throw e;
            })
            .info('ready', function (extIw) {
                service = new Service('my-primary-service', { //I get here... so service 1 is good
                    dependencyCheckTimeout: 250,
                    dependencyCheckFrequency: 10
                })
                    .inject(function (service, use) {
                        use(new SocketWorker(service.comm, service.who()));
                    })
                    .inject(function (service, use) {
                        use(new HttpWorker(service.comm, service.who(), {
                            apiUri: apiUri,
                            port: ports.CfClientWorker[1]
                        }));
                    })
                    .inject(function (service, use) {
                        use(new CfClientWorker(service.comm, service.who(), {vcapServices:'VCAP_SERVICES_CF'}));
                    })
                    .info('error', function (e) {
                        throw e;
                    })
                    .info('ready', function (iw) {
                        iw.service.comm.ask('comm.my-other-service.ask.foo-worker.foo',function(e,results) {
                            expect(e).to.be.null;
                            expect(results).to.be.equal('bar');
                            extIw.service.dispose(function () {
                                iw.service.dispose(function () {
                                    done();
                                });
                            });
                        });
                    });

                    service.start();
            })
            .start();
});



});
