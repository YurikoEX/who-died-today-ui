
var _ = require('lodash');

var chai = require('chai')
    ,expect = chai.expect;

chai.use(require('../_chai/toHaveAListener'));
chai.use(require('../_chai/toHaveAMethod'));

var ports = require('../test-ports.json');

var LogWorker = require('../../src/workers/LogWorker');
var Interceptor = require('../../src/interception/Interceptor');
var Service = require('../../src/service/Service');
var Worker = require('../../src/workers/Worker');
var HttpWorker = require('../../src/workers/HttpWorker');
var SocketWorker = require('../../src/workers/SocketWorker');
var CfClientWorker = require('../../src/workers/CfClientWorker');

describe('LogWorker', function () {
    var service;

    beforeEach(function (done) {
        if (_.isUndefined(process.env['VCAP_SERVICES'])) {
            process.env['VCAP_SERVICES'] = JSON.stringify(
                {
                    "user-provided": [
                        {
                            "credentials": {
                                "iw": "true",
                                "serviceName": "my-other-service",
                                "protocol":"http",
                                "host": "localhost",
                                "port": ports.CfClientWorker[0],
                                "route":"",
                                "token": "qwer32r123rewr213r"
                            },
                            "label": "user-provided",
                            "name": "my-other-service",
                            "syslog_drain_url": "",
                            "tags": []
                        },
                        {
                            "credentials": {
                                "iw": "true",
                                "serviceName": "service-name",
                                "protocol":"http",
                                "host": "localhost",
                                "port": ports.LogWorker[0],
                                "route":"",
                                "token": "qwer32r123rewr213r"
                            },
                            "label": "user-provided",
                            "name": "service-name",
                            "syslog_drain_url": "",
                            "tags": []
                        }
                    ]
                });
        }
        done();
    });

    it("should log JSON versions of all emit's and listener's callbacks to stdout/stderr", function (done) {
        var service = new Service('service-name', {
            dependencyCheckTimeout: 250,
            dependencyCheckFrequency: 10
        })
            .inject(function (service, use) {
                var w = new Worker([], service.comm, service.who(), {
                    id: 'worker-test-id',
                    name: 'worker-test'
                });
                w.respond('test', function (req, cb) {
                    cb(null, req);
                });
                w.init = function (cb) {
                    if (!_.isUndefined(cb)) {
                        cb();
                    }
                };
                w.start = function (deps, cb) {
                    if (!_.isUndefined(cb)) {
                        cb();
                    }
                };
                use(w);
            })
            .inject(function (service, use) {
                use(new LogWorker(service.comm, service.who(), function (s) {
                    expect(s.length).to.be.above(0);
                }));
            })
            .info('error', function (e) {
                throw e;
            })
            .info('ready', function (iw) {
                var test = {
                    some: 'data'
                };
                iw.service.comm.request('comm.service-name.request.worker-test.test', test, function (e, res) {
                    expect(res).to.be.equal(test);
                    iw.service.dispose(function () {
                        done();
                    });
                });
            })
            .start();
    });
});
