var _ = require('lodash');

var chai = require('chai')
    ,expect = chai.expect;

chai.use(require('../_chai/toHaveAListener'));
chai.use(require('../_chai/toHaveAMethod'));

var RedisWorker= require('../../src/workers/RedisWorker');
var Comm = require('../../src/eventing/Comm');

describe('RedisWorker', function () {
    var serviceAm = {
        id: 'service-id',
        name: 'service-name'
    };
    var worker, rediscloud;

    var testData = {some:'data'};
    beforeEach(function (done) {
        if (_.isUndefined(process.env['VCAP_SERVICES_REDIS'])) {
            process.env['VCAP_SERVICES_REDIS'] = JSON.stringify({
                "rediscloud": [
                    {
                        "name": "salRedisService",
                        "label": "rediscloud",
                        "tags": [
                            "Data Stores",
                            "Data Store",
                            "Caching",
                            "Messaging and Queuing",
                            "key-value",
                            "caching",
                            "redis"
                        ],
                        "plan": "30mb",
                        "credentials": {
                            "hostname": "127.0.0.1",
                            "port": "6379"
                        }
                    }
                ]
            });
        }


        var comm = new Comm({
            id: 'comm-id',
            name: 'comm-name'
        });
        worker = new RedisWorker(comm, serviceAm, {
            vcapServices:'VCAP_SERVICES_REDIS',
            redisProp:'rediscloud'
        });
        worker.init(function(err){
            if(!err){
                worker.start([],function(err){
                    if(!err){
                        done();
                    }else{
                        throw err;
                    }
                })
            }else{
                throw err;
            }
        });
    });

    it("should set a value with 'inform' and 'request' to get the value back", function (done) {
        worker.inform('set',{key:'testset',value:testData});
        worker.request('get','testset',function(err,results){
            expect(results.some).to.be.equal('data');
            done();
        });
    });

    it("should set object of key/values in an hash key", function (done) {
        worker.request('hmset',{key:'testhmset',value:testData},function(err,results1){
            if(!err){
                worker.request('hgetall','testhmset',function(err,results2){
                    expect(results2.some).to.be.equal('data');
                    done();
                });
            }
        });

    });


    it("should have a 'dispose' method", function () {
        expect(worker).to.have.a.method('dispose');
    });
});
