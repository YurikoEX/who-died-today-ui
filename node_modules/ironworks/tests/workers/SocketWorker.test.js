
var _ = require('lodash');
var ioClient = require('socket.io-client');
var io = require('socket.io');
var request = require('request');

var chai = require('chai')
    ,expect = chai.expect;

chai.use(require('../_chai/toHaveAListener'));
chai.use(require('../_chai/toHaveAMethod'));

var ports = require('../test-ports.json');

var Service = require('../../src/service/Service');
var Comm = require('../../src/eventing/Comm');
var Worker = require('../../src/workers/Worker');
var HttpWorker = require('../../src/workers/HttpWorker');

var SocketWorker = require('../../src/workers/SocketWorker');

describe('SocketWorker', function () {
    var service;

    it("should emit events received over the socket on comm", function (done) {
        service = new Service('service-name', {
            dependencyCheckTimeout: 250,
            dependencyCheckFrequency: 10
        })
            .inject(function (service, use) {
                var w = new Worker([
                    'iw-socket'
                ], service.comm, service.who(), {
                    id: 'worker-test-id',
                    name: 'worker-test'
                });
                w.listen('test', function () {
                    service.dispose(function () {
                        done();
                    });
                });
                w.init = function (cb) {
                    if (!_.isUndefined(cb)) {
                        cb();
                    }
                };
                w.start = function (deps, cb) {
                    if (!_.isUndefined(cb)) {
                        cb();
                    }
                };
                use(w);
            })
            .inject(function (service, use) {
                use(new SocketWorker(service.comm, service.who()));
            })
            .inject(function (service, use) {
                use(new HttpWorker(service.comm, service.who(), {
                    port: ports.SocketWorker[0]
                }));
            })
            .info('error', function (e) {
                throw e;
            })
            .info('ready', function (iw) {
                iw.service.get({
                    names: [ 'iw-http' ]
                }, function (e, results) {
                    ioClient(results.list()[0].httpServer.info.uri).emit('tell.worker-test.test');
                });
            })
            .start();
    });

});
