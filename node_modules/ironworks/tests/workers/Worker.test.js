
var chai = require('chai')
    ,expect = chai.expect;

chai.use(require('../_chai/toHaveAListener'));
chai.use(require('../_chai/toHaveAMethod'));

var Worker = require('../../src/workers/Worker');
var Comm = require('../../src/eventing/Comm');

describe('Worker', function () {
    var serviceAm = {
        id: 'service-id',
        name: 'service-name'
    };
    var worker;
    beforeEach(function () {
        var comm = new Comm({
            id: 'comm-id',
            name: 'comm-name'
        });
        worker = new Worker([], comm, serviceAm, {
            id: 'worker-id',
            name: 'worker-name'
        });
    });

    it("should implement a 'tell' / 'listen' emit/listener combination", function (done) {
        worker.listen('test', function () {
            done();
        });
        worker.tell('test');
    });

    it("should implement a 'inform' / 'info' emit/listener combination", function (done) {
        var test = {
            some: "data"
        };
        worker.info('test', function (info) {
            expect(info).to.be.equal(test);
            done();
        });
        worker.inform('test', test);
    });

    it("should implement a 'confirm' / 'ack' emit/listener combination", function (done) {
        worker.ack('test', function (cb) {
            cb(void 0);
        });
        worker.confirm('test', function (e) {
            done();
        });
    });

    it("should implement a 'ask' / 'answer' emit/listener combination", function (done) {
        var test = {
            some: "data"
        };
        worker.answer('test', function (cb) {
            cb(void 0, test);
        });
        worker.ask('test', function (e, answer) {
            expect(answer).to.be.equal(test);
            done();
        });
    });

    it("should implement a 'request' / 'respond' emit/listener combination", function (done) {
        var test = {
            some: "data2"
        };
        worker.respond('test', function (request, cb) {
            cb(void 0, request);
        });
        worker.request('test', test, function (e, response) {
            expect(response).to.be.equal(test);
            done();
        });
    });

    it("should implement an 'onlyOnce' method that makes the next listener created only catch the event once", function (done) {
        worker.onlyOnce().listen('test', function () {
            done();
        });
        worker.tell('test');
        worker.tell('test');
    });

    it("should have a 'dispose' method", function () {
        expect(worker).to.have.a.method('dispose');
    });
});
